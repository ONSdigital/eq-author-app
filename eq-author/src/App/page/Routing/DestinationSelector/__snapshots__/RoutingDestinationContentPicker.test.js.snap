// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RoutingDestinationContentPicker displayName should correctly render logicalDestination EndOfQuestionnaire 1`] = `
<UnwrappedContentPickerSelect
  contentTypes={
    Array [
      "Destination",
    ]
  }
  destinationData={
    Object {
      "logicalDestinations": Array [],
      "pages": Array [],
      "sections": Array [],
    }
  }
  name="routingDestination"
  onSubmit={[MockFunction]}
  selectedContentDisplayName="End of questionnaire"
  selectedObj={
    Object {
      "logical": "EndOfQuestionnaire",
    }
  }
/>
`;

exports[`RoutingDestinationContentPicker displayName should correctly render page display name 1`] = `
<UnwrappedContentPickerSelect
  contentTypes={
    Array [
      "Destination",
    ]
  }
  destinationData={
    Object {
      "logicalDestinations": Array [],
      "pages": Array [],
      "sections": Array [],
    }
  }
  name="routingDestination"
  onSubmit={[MockFunction]}
  selectedContentDisplayName="page name"
  selectedObj={
    Object {
      "page": Object {
        "displayName": "page name",
        "id": "1",
      },
    }
  }
/>
`;

exports[`RoutingDestinationContentPicker displayName should correctly render section display name 1`] = `
<UnwrappedContentPickerSelect
  contentTypes={
    Array [
      "Destination",
    ]
  }
  destinationData={
    Object {
      "logicalDestinations": Array [],
      "pages": Array [],
      "sections": Array [],
    }
  }
  name="routingDestination"
  onSubmit={[MockFunction]}
  selectedContentDisplayName="section name"
  selectedObj={
    Object {
      "section": Object {
        "displayName": "section name",
        "id": "1",
      },
    }
  }
/>
`;

exports[`RoutingDestinationContentPicker displayName should render first page display name when logical destination is next page 1`] = `
<UnwrappedContentPickerSelect
  contentTypes={
    Array [
      "Destination",
    ]
  }
  destinationData={
    Object {
      "logicalDestinations": Array [],
      "pages": Array [
        Object {
          "displayName": "page name",
          "id": "1",
        },
      ],
      "sections": Array [],
    }
  }
  name="routingDestination"
  onSubmit={[MockFunction]}
  selectedContentDisplayName="page name"
  selectedObj={
    Object {
      "logical": "NextPage",
    }
  }
/>
`;

exports[`RoutingDestinationContentPicker displayName should render first page display name when logical destination is next page and no pages 1`] = `
<UnwrappedContentPickerSelect
  contentTypes={
    Array [
      "Destination",
    ]
  }
  destinationData={
    Object {
      "logicalDestinations": Array [],
      "pages": Array [],
      "sections": Array [
        Object {
          "displayName": "section name",
          "id": "1",
        },
      ],
    }
  }
  name="routingDestination"
  onSubmit={[MockFunction]}
  selectedContentDisplayName="section name"
  selectedObj={
    Object {
      "logical": "NextPage",
    }
  }
/>
`;

exports[`RoutingDestinationContentPicker displayName should render with no display name if loading and next page selected 1`] = `
<UnwrappedContentPickerSelect
  contentTypes={
    Array [
      "Destination",
    ]
  }
  destinationData={
    Object {
      "logicalDestinations": Array [],
      "pages": Array [],
      "sections": Array [],
    }
  }
  name="routingDestination"
  onSubmit={[MockFunction]}
  selectedContentDisplayName=""
  selectedObj={
    Object {
      "logical": "NextPage",
    }
  }
/>
`;

exports[`RoutingDestinationContentPicker should render 1`] = `
<UnwrappedContentPickerSelect
  contentTypes={
    Array [
      "Destination",
    ]
  }
  destinationData={
    Object {
      "logicalDestinations": Array [],
      "pages": Array [],
      "sections": Array [],
    }
  }
  name="routingDestination"
  onSubmit={[MockFunction]}
  selectedContentDisplayName="End of questionnaire"
  selectedObj={
    Object {
      "logical": "NextPage",
    }
  }
/>
`;
