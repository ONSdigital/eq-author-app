// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NumberAnswerSelector should render 1`] = `
<Fragment>
  <NumberAnswerSelector__NumberAnswerRoutingSelector>
    <VisuallyHidden>
      <Label
        bold={true}
        htmlFor="expression-condition-1"
      >
        Operator
      </Label>
    </VisuallyHidden>
    <NumberAnswerSelector__ConditionSelector
      data-test="condition-selector"
      id="expression-condition-1"
      name="condition-select"
      onChange={[Function]}
    >
      <option
        value={null}
      >
        Select an operator
      </option>
      <option
        value="Equal"
      >
        (=) Equal to
      </option>
      <option
        value="NotEqual"
      >
        (≠) Not equal to
      </option>
      <option
        value="GreaterThan"
      >
        (&gt;) More than
      </option>
      <option
        value="LessThan"
      >
        (&lt;) Less than
      </option>
      <option
        value="GreaterOrEqual"
      >
        (≥) More than or equal to
      </option>
      <option
        value="LessOrEqual"
      >
        (≤) Less than or equal to
      </option>
      <option
        value="Unanswered"
      >
        Unanswered
      </option>
    </NumberAnswerSelector__ConditionSelector>
    <NumberAnswerSelector__Value>
      <VisuallyHidden>
        <Label
          bold={true}
          htmlFor="expression-right-1"
        >
          Value
        </Label>
      </VisuallyHidden>
      <Number
        data-test="number-value-input"
        default={null}
        id="expression-right-1"
        max={999999999}
        min={-99999999}
        name="expression-right-1"
        onBlur={[Function]}
        onChange={[Function]}
        placeholder="Value"
        step={1}
        type="Number"
        unit={null}
        value={null}
      />
    </NumberAnswerSelector__Value>
  </NumberAnswerSelector__NumberAnswerRoutingSelector>
</Fragment>
`;

exports[`NumberAnswerSelector should render a currency 1`] = `
<Fragment>
  <NumberAnswerSelector__NumberAnswerRoutingSelector>
    <VisuallyHidden>
      <Label
        bold={true}
        htmlFor="expression-condition-1"
      >
        Operator
      </Label>
    </VisuallyHidden>
    <NumberAnswerSelector__ConditionSelector
      data-test="condition-selector"
      id="expression-condition-1"
      name="condition-select"
      onChange={[Function]}
    >
      <option
        value={null}
      >
        Select an operator
      </option>
      <option
        value="Equal"
      >
        (=) Equal to
      </option>
      <option
        value="NotEqual"
      >
        (≠) Not equal to
      </option>
      <option
        value="GreaterThan"
      >
        (&gt;) More than
      </option>
      <option
        value="LessThan"
      >
        (&lt;) Less than
      </option>
      <option
        value="GreaterOrEqual"
      >
        (≥) More than or equal to
      </option>
      <option
        value="LessOrEqual"
      >
        (≤) Less than or equal to
      </option>
      <option
        value="Unanswered"
      >
        Unanswered
      </option>
    </NumberAnswerSelector__ConditionSelector>
    <NumberAnswerSelector__Value>
      <VisuallyHidden>
        <Label
          bold={true}
          htmlFor="expression-right-1"
        >
          Value
        </Label>
      </VisuallyHidden>
      <Number
        data-test="number-value-input"
        default={null}
        id="expression-right-1"
        max={999999999}
        min={-99999999}
        name="expression-right-1"
        onBlur={[Function]}
        onChange={[Function]}
        placeholder="Value"
        step={1}
        type="Currency"
        unit={null}
        value={null}
      />
    </NumberAnswerSelector__Value>
  </NumberAnswerSelector__NumberAnswerRoutingSelector>
</Fragment>
`;

exports[`NumberAnswerSelector should render a percentage 1`] = `
<Fragment>
  <NumberAnswerSelector__NumberAnswerRoutingSelector>
    <VisuallyHidden>
      <Label
        bold={true}
        htmlFor="expression-condition-1"
      >
        Operator
      </Label>
    </VisuallyHidden>
    <NumberAnswerSelector__ConditionSelector
      data-test="condition-selector"
      id="expression-condition-1"
      name="condition-select"
      onChange={[Function]}
    >
      <option
        value={null}
      >
        Select an operator
      </option>
      <option
        value="Equal"
      >
        (=) Equal to
      </option>
      <option
        value="NotEqual"
      >
        (≠) Not equal to
      </option>
      <option
        value="GreaterThan"
      >
        (&gt;) More than
      </option>
      <option
        value="LessThan"
      >
        (&lt;) Less than
      </option>
      <option
        value="GreaterOrEqual"
      >
        (≥) More than or equal to
      </option>
      <option
        value="LessOrEqual"
      >
        (≤) Less than or equal to
      </option>
      <option
        value="Unanswered"
      >
        Unanswered
      </option>
    </NumberAnswerSelector__ConditionSelector>
    <NumberAnswerSelector__Value>
      <VisuallyHidden>
        <Label
          bold={true}
          htmlFor="expression-right-1"
        >
          Value
        </Label>
      </VisuallyHidden>
      <Number
        data-test="number-value-input"
        default={null}
        id="expression-right-1"
        max={999999999}
        min={-99999999}
        name="expression-right-1"
        onBlur={[Function]}
        onChange={[Function]}
        placeholder="Value"
        step={1}
        type="Percentage"
        unit={null}
        value={null}
      />
    </NumberAnswerSelector__Value>
  </NumberAnswerSelector__NumberAnswerRoutingSelector>
</Fragment>
`;
