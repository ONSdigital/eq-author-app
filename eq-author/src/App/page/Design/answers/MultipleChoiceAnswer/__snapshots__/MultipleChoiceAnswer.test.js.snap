// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultipleChoiceAnswer exclusive options should render exclusive 1`] = `
<withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
  answer={
    Object {
      "id": "0",
      "mutuallyExclusiveOption": Object {
        "__typename": "Option",
        "description": "",
        "id": "4",
        "label": "I am mutually exclusive",
      },
      "options": Array [
        Object {
          "description": "",
          "id": 0,
          "label": "",
        },
      ],
      "type": "Checkbox",
    }
  }
  autoFocus={false}
  enableValidationMessage={true}
  labelText="Label (optional)"
  onUpdate={[MockFunction]}
  type="Checkbox"
>
  <MultipleChoiceAnswer__AnswerWrapper>
    <TransitionGroup
      childFactory={[Function]}
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "MultipleChoiceAnswer__Options-sc-199jynm-2",
            "isStatic": false,
            "rules": Array [
              "margin:0 0 1em;",
            ],
          },
          "displayName": "MultipleChoiceAnswer__Options",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "MultipleChoiceAnswer__Options-sc-199jynm-2",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      data-test="multiple-choice-options"
    >
      <Reorder
        Transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "_foldedDefaultProps": Object {
              "timeout": 200,
            },
            "attrs": Array [
              [Function],
            ],
            "componentStyle": ComponentStyle {
              "componentId": "OptionTransition-c3kfae-0",
              "isStatic": false,
              "rules": Array [
                "position:relative;&.option-enter{opacity:0;transform:scale(0.9);z-index:200;}&.option-enter-active{opacity:1;transform:scale(1);transition:opacity ",
                [Function],
                "ms ease-out,transform ",
                [Function],
                "ms cubic-bezier(0.175,0.885,0.32,1.275);}&.option-exit{opacity:1;transform:scale(1);}&.option-exit-active{opacity:0;height:0 !important;transform:scale(0.9);transition:opacity ",
                [Function],
                "ms ease-out,height ",
                [Function],
                "ms ease-in ",
                [Function],
                "ms,transform ",
                [Function],
                "ms ease-in;}",
              ],
            },
            "displayName": "OptionTransition",
            "foldedComponentIds": Array [],
            "propTypes": Object {
              "children": [Function],
              "timeout": [Function],
            },
            "render": [Function],
            "styledComponentId": "OptionTransition-c3kfae-0",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        list={
          Array [
            Object {
              "description": "",
              "id": 0,
              "label": "",
            },
          ]
        }
        onMove={[MockFunction]}
      >
        <Component />
      </Reorder>
      <OptionTransition
        key="4"
        timeout={200}
      >
        <MultipleChoiceAnswer__SpecialOptionWrapper
          data-test="exclusive-option"
        >
          <MultipleChoiceAnswer__ExclusiveOr>
            Or
          </MultipleChoiceAnswer__ExclusiveOr>
          <Connect(withEntityEditor(StatelessOption))
            hasDeleteButton={true}
            hideMoveButtons={true}
            onAddExclusive={[MockFunction]}
            onAddOption={[MockFunction]}
            onChange={[MockFunction]}
            onDelete={[Function]}
            onDeleteOption={[MockFunction]}
            onEnterKey={[Function]}
            onUpdate={[MockFunction]}
            option={
              Object {
                "__typename": "Option",
                "description": "",
                "id": "4",
                "label": "I am mutually exclusive",
              }
            }
            store={
              Object {
                "dispatch": [MockFunction],
                "getState": [MockFunction],
                "subscribe": [MockFunction],
              }
            }
          />
        </MultipleChoiceAnswer__SpecialOptionWrapper>
      </OptionTransition>
    </TransitionGroup>
    <div>
      <SplitButton
        dataTest="btn-add-option"
        onPrimaryAction={[Function]}
        onToggleOpen={[Function]}
        open={false}
        primaryText="Add checkbox"
      >
        <Dropdown>
          <MenuItem
            data-test="btn-add-option-other"
            onClick={[Function]}
          >
            Add “Other” option
          </MenuItem>
          <MenuItem
            data-test="btn-add-mutually-exclusive-option"
            disabled={true}
            onClick={[Function]}
          >
            Add an “Or” option
          </MenuItem>
        </Dropdown>
      </SplitButton>
    </div>
  </MultipleChoiceAnswer__AnswerWrapper>
</withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))>
`;

exports[`MultipleChoiceAnswer other option and answer should render other 1`] = `
<withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
  answer={
    Object {
      "id": "0",
      "options": Array [
        Object {
          "description": "",
          "id": 0,
          "label": "",
        },
        Object {
          "description": "",
          "id": 1,
          "label": "",
        },
      ],
      "other": Object {
        "answer": Object {
          "id": "1",
          "options": Array [
            Object {
              "__typename": "Option",
              "description": "",
              "id": "1",
              "label": "",
            },
          ],
          "type": "TextField",
        },
        "option": Object {
          "__typename": "Option",
          "id": "2",
        },
      },
    }
  }
  autoFocus={false}
  enableValidationMessage={true}
  labelText="Label (optional)"
  onUpdate={[MockFunction]}
>
  <MultipleChoiceAnswer__AnswerWrapper>
    <TransitionGroup
      childFactory={[Function]}
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "MultipleChoiceAnswer__Options-sc-199jynm-2",
            "isStatic": false,
            "rules": Array [
              "margin:0 0 1em;",
            ],
          },
          "displayName": "MultipleChoiceAnswer__Options",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "MultipleChoiceAnswer__Options-sc-199jynm-2",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      data-test="multiple-choice-options"
    >
      <Reorder
        Transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "_foldedDefaultProps": Object {
              "timeout": 200,
            },
            "attrs": Array [
              [Function],
            ],
            "componentStyle": ComponentStyle {
              "componentId": "OptionTransition-c3kfae-0",
              "isStatic": false,
              "rules": Array [
                "position:relative;&.option-enter{opacity:0;transform:scale(0.9);z-index:200;}&.option-enter-active{opacity:1;transform:scale(1);transition:opacity ",
                [Function],
                "ms ease-out,transform ",
                [Function],
                "ms cubic-bezier(0.175,0.885,0.32,1.275);}&.option-exit{opacity:1;transform:scale(1);}&.option-exit-active{opacity:0;height:0 !important;transform:scale(0.9);transition:opacity ",
                [Function],
                "ms ease-out,height ",
                [Function],
                "ms ease-in ",
                [Function],
                "ms,transform ",
                [Function],
                "ms ease-in;}",
              ],
            },
            "displayName": "OptionTransition",
            "foldedComponentIds": Array [],
            "propTypes": Object {
              "children": [Function],
              "timeout": [Function],
            },
            "render": [Function],
            "styledComponentId": "OptionTransition-c3kfae-0",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        list={
          Array [
            Object {
              "description": "",
              "id": 0,
              "label": "",
            },
            Object {
              "description": "",
              "id": 1,
              "label": "",
            },
          ]
        }
        onMove={[MockFunction]}
      >
        <Component />
      </Reorder>
    </TransitionGroup>
    <div>
      <SplitButton
        dataTest="btn-add-option"
        onPrimaryAction={[Function]}
        onToggleOpen={[Function]}
        open={false}
        primaryText="Add another option"
      >
        <Dropdown>
          <MenuItem
            data-test="btn-add-option-other"
            onClick={[Function]}
          >
            Add “Other” option
          </MenuItem>
        </Dropdown>
      </SplitButton>
    </div>
  </MultipleChoiceAnswer__AnswerWrapper>
</withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))>
`;

exports[`MultipleChoiceAnswer should match snapshot 1`] = `
<withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
  answer={
    Object {
      "id": "0",
      "options": Array [
        Object {
          "__typename": "Option",
          "description": "",
          "id": "1",
          "label": "",
        },
      ],
    }
  }
  autoFocus={false}
  enableValidationMessage={true}
  labelText="Label (optional)"
  onUpdate={[MockFunction]}
>
  <MultipleChoiceAnswer__AnswerWrapper>
    <TransitionGroup
      childFactory={[Function]}
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "MultipleChoiceAnswer__Options-sc-199jynm-2",
            "isStatic": false,
            "rules": Array [
              "margin:0 0 1em;",
            ],
          },
          "displayName": "MultipleChoiceAnswer__Options",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "MultipleChoiceAnswer__Options-sc-199jynm-2",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      data-test="multiple-choice-options"
    >
      <Reorder
        Transition={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "_foldedDefaultProps": Object {
              "timeout": 200,
            },
            "attrs": Array [
              [Function],
            ],
            "componentStyle": ComponentStyle {
              "componentId": "OptionTransition-c3kfae-0",
              "isStatic": false,
              "rules": Array [
                "position:relative;&.option-enter{opacity:0;transform:scale(0.9);z-index:200;}&.option-enter-active{opacity:1;transform:scale(1);transition:opacity ",
                [Function],
                "ms ease-out,transform ",
                [Function],
                "ms cubic-bezier(0.175,0.885,0.32,1.275);}&.option-exit{opacity:1;transform:scale(1);}&.option-exit-active{opacity:0;height:0 !important;transform:scale(0.9);transition:opacity ",
                [Function],
                "ms ease-out,height ",
                [Function],
                "ms ease-in ",
                [Function],
                "ms,transform ",
                [Function],
                "ms ease-in;}",
              ],
            },
            "displayName": "OptionTransition",
            "foldedComponentIds": Array [],
            "propTypes": Object {
              "children": [Function],
              "timeout": [Function],
            },
            "render": [Function],
            "styledComponentId": "OptionTransition-c3kfae-0",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        list={
          Array [
            Object {
              "__typename": "Option",
              "description": "",
              "id": "1",
              "label": "",
            },
          ]
        }
        onMove={[MockFunction]}
      >
        <Component />
      </Reorder>
    </TransitionGroup>
    <div>
      <SplitButton
        dataTest="btn-add-option"
        onPrimaryAction={[Function]}
        onToggleOpen={[Function]}
        open={false}
        primaryText="Add another option"
      >
        <Dropdown>
          <MenuItem
            data-test="btn-add-option-other"
            onClick={[Function]}
          >
            Add “Other” option
          </MenuItem>
        </Dropdown>
      </SplitButton>
    </div>
  </MultipleChoiceAnswer__AnswerWrapper>
</withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))>
`;
