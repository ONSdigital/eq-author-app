// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Answer Editor should correctly calculates date format 1`] = `null`;

exports[`Answer Editor should correctly calculates date format 2`] = `null`;

exports[`Answer Editor should correctly calculates date format 3`] = `null`;

exports[`Answer Editor should render Checkbox 1`] = `
<AnswerEditor__Answer
  aria-label="Checkbox answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        Checkbox
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(Apollo(UnwrappedMultipleChoiceAnswer))))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "options": Array [
            Object {
              "description": "",
              "id": "1",
              "label": "",
            },
          ],
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "Checkbox",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      type="Checkbox"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render Currency 1`] = `
<AnswerEditor__Answer
  aria-label="Currency answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        Currency
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "Currency",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      showDescription={true}
      type="Currency"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render Date 1`] = `
<AnswerEditor__Answer
  aria-label="Date answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        Date
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <DateSingle
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "Date",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      label="Label"
      multipleAnswers={false}
      name="label"
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      showDay={false}
      showMonth={false}
      showYear={false}
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render DateRange 1`] = `
<AnswerEditor__Answer
  aria-label="DateRange answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        DateRange
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <DateRange
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "DateRange",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render Duration 1`] = `
<AnswerEditor__Answer
  aria-label="Duration answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        Duration
         (Years/Months)
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {
            "unit": "YearsMonths",
          },
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "Duration",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      showDescription={true}
      type="Duration"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render Mutually Exclusive 1`] = `
<AnswerEditor__Answer
  aria-label="MutuallyExclusive answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        OR
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={true}
            onClick={[MockFunction]}
            tabIndex={-1}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={true}
            onClick={[MockFunction]}
            tabIndex={-1}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(Apollo(UnwrappedMultipleChoiceAnswer))))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "options": Array [
            Object {
              "description": "",
              "id": "1",
              "label": "",
            },
          ],
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "MutuallyExclusive",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      type="MutuallyExclusive"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render Number 1`] = `
<AnswerEditor__Answer
  aria-label="Number answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        Number
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "Number",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      showDescription={true}
      type="Number"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render Percentage 1`] = `
<AnswerEditor__Answer
  aria-label="Percentage answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        Percentage
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "Percentage",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      showDescription={true}
      type="Percentage"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render Radio 1`] = `
<AnswerEditor__Answer
  aria-label="Radio answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        Radio
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(Apollo(UnwrappedMultipleChoiceAnswer))))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "options": Array [
            Object {
              "description": "",
              "id": "1",
              "label": "",
            },
          ],
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "Radio",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      minOptions={2}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      type="Radio"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render TextArea 1`] = `
<AnswerEditor__Answer
  aria-label="TextArea answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        TextArea
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "TextArea",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      type="TextArea"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render TextField 1`] = `
<AnswerEditor__Answer
  aria-label="TextField answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        TextField
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {},
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "TextField",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      type="TextField"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;

exports[`Answer Editor should render Unit 1`] = `
<AnswerEditor__Answer
  aria-label="Unit answer"
  className="answer"
  data-test="answer-editor"
>
  <AnswerEditor__AnswerHeader>
    <AnswerEditor__AnswerTypePanel>
      <AnswerEditor__AnswerType
        data-test="answer-type"
      >
        Centimetres
         (cm)
         answer
      </AnswerEditor__AnswerType>
      <AnswerEditor__Buttons>
        <Tooltip
          content="Move answer up"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer up"
            color="white"
            data-test="btn-move-answer-up"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Move answer down"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <MoveButton
            aria-label="Move answer down"
            color="white"
            data-test="btn-move-answer-down"
            disabled={false}
            onClick={[MockFunction]}
          >
            <Component />
          </MoveButton>
        </Tooltip>
        <Tooltip
          content="Delete answer"
          offset={
            Object {
              "bottom": 10,
              "top": 0,
            }
          }
          place="top"
        >
          <DeleteButton
            aria-label="Delete answer"
            color="white"
            data-test="btn-delete-answer"
            onClick={[Function]}
            size="medium"
            type="button"
          />
        </Tooltip>
      </AnswerEditor__Buttons>
    </AnswerEditor__AnswerTypePanel>
  </AnswerEditor__AnswerHeader>
  <AnswerEditor__Padding>
    <withValidationError(Connect(withEntityEditor(StatelessBasicAnswer)))
      answer={
        Object {
          "advancedProperties": false,
          "description": "",
          "displayName": "",
          "guidance": "",
          "id": "1",
          "label": "",
          "properties": Object {
            "unit": "Centimetres",
          },
          "qCode": "",
          "secondaryLabel": "",
          "secondaryLabelDefault": "",
          "title": "",
          "type": "Unit",
        }
      }
      canMoveDown={true}
      canMoveUp={true}
      enableValidationMessage={true}
      multipleAnswers={false}
      onAddExclusive={[MockFunction]}
      onAddOption={[MockFunction]}
      onChange={[MockFunction]}
      onDeleteAnswer={[MockFunction]}
      onDeleteOption={[MockFunction]}
      onMoveDown={[MockFunction]}
      onMoveUp={[MockFunction]}
      onUpdate={[MockFunction]}
      onUpdateOption={[MockFunction]}
      showDescription={true}
      type="Unit"
    />
  </AnswerEditor__Padding>
</AnswerEditor__Answer>
`;
