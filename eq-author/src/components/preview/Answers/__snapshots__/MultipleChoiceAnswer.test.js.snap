// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultipleChoiceAnswer Option should render answer when it has one 1`] = `
<MultipleChoiceAnswer__OptionItem
  error={true}
>
  <MultipleChoiceAnswer__Input
    error={true}
    type="Checkbox"
  />
  <MultipleChoiceAnswer__OptionLabel>
    Missing label
  </MultipleChoiceAnswer__OptionLabel>
  <MultipleChoiceAnswer__OtherField>
    <MultipleChoiceAnswer__OtherLabel />
    <MultipleChoiceAnswer__TextInput
      type="text"
    />
  </MultipleChoiceAnswer__OtherField>
</MultipleChoiceAnswer__OptionItem>
`;

exports[`MultipleChoiceAnswer Option should render checkbox options 1`] = `
<MultipleChoiceAnswer__OptionItem
  error={true}
>
  <MultipleChoiceAnswer__Input
    error={true}
    type="Checkbox"
  />
  <MultipleChoiceAnswer__OptionLabel>
    Missing label
  </MultipleChoiceAnswer__OptionLabel>
</MultipleChoiceAnswer__OptionItem>
`;

exports[`MultipleChoiceAnswer Option should render label when it has one 1`] = `
<MultipleChoiceAnswer__OptionItem
  error={false}
>
  <MultipleChoiceAnswer__Input
    error={false}
    type="Checkbox"
  />
  <MultipleChoiceAnswer__OptionLabel>
    Option label
  </MultipleChoiceAnswer__OptionLabel>
</MultipleChoiceAnswer__OptionItem>
`;

exports[`MultipleChoiceAnswer Option should render radio options 1`] = `
<MultipleChoiceAnswer__OptionItem
  error={true}
>
  <MultipleChoiceAnswer__Input
    error={true}
    type="Radio"
  />
  <MultipleChoiceAnswer__OptionLabel>
    Missing label
  </MultipleChoiceAnswer__OptionLabel>
</MultipleChoiceAnswer__OptionItem>
`;

exports[`MultipleChoiceAnswer should render Input 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "MultipleChoiceAnswer__Input-sc-1jty9me-1",
        "isStatic": false,
        "rules": Array [
          "width:20px;height:20px;appearance:none;border:1px solid #9b9b9b;padding:0.5em;background:#eee;box-shadow:inset 0 0 0 3px white;pointer-events:none;position:absolute;top:1em;left:1em;",
          [Function],
          ";",
          [Function],
          ";",
        ],
      },
      "displayName": "MultipleChoiceAnswer__Input",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "MultipleChoiceAnswer__Input-sc-1jty9me-1",
      "target": "input",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
/>
`;

exports[`MultipleChoiceAnswer should render Input with radio and error 1`] = `
<StyledComponent
  error={true}
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "MultipleChoiceAnswer__Input-sc-1jty9me-1",
        "isStatic": false,
        "rules": Array [
          "width:20px;height:20px;appearance:none;border:1px solid #9b9b9b;padding:0.5em;background:#eee;box-shadow:inset 0 0 0 3px white;pointer-events:none;position:absolute;top:1em;left:1em;",
          [Function],
          ";",
          [Function],
          ";",
        ],
      },
      "displayName": "MultipleChoiceAnswer__Input",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "MultipleChoiceAnswer__Input-sc-1jty9me-1",
      "target": "input",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
  type="Radio"
/>
`;

exports[`MultipleChoiceAnswer should render OptionItem 1`] = `
<StyledComponent
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "MultipleChoiceAnswer__OptionItem-sc-1jty9me-4",
        "isStatic": false,
        "rules": Array [
          "font-size:1em;background:#fff;border:1px solid ",
          "#999999",
          ";border-radius:0.2em;width:auto;min-width:20em;display:inline-block;overflow:hidden;position:relative;margin-bottom:0.25em;",
          [Function],
          ";",
        ],
      },
      "displayName": "MultipleChoiceAnswer__OptionItem",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "MultipleChoiceAnswer__OptionItem-sc-1jty9me-4",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
/>
`;

exports[`MultipleChoiceAnswer should render OptionItem with error 1`] = `
<StyledComponent
  error={true}
  forwardedComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "MultipleChoiceAnswer__OptionItem-sc-1jty9me-4",
        "isStatic": false,
        "rules": Array [
          "font-size:1em;background:#fff;border:1px solid ",
          "#999999",
          ";border-radius:0.2em;width:auto;min-width:20em;display:inline-block;overflow:hidden;position:relative;margin-bottom:0.25em;",
          [Function],
          ";",
        ],
      },
      "displayName": "MultipleChoiceAnswer__OptionItem",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "MultipleChoiceAnswer__OptionItem-sc-1jty9me-4",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  forwardedRef={null}
/>
`;

exports[`MultipleChoiceAnswer should render checkboxes 1`] = `
<Field>
  <MultipleChoiceAnswer__Legend>
    Foo
  </MultipleChoiceAnswer__Legend>
  <Option
    key="1"
    option={
      Object {
        "id": "1",
      }
    }
    type="Checkbox"
  />
</Field>
`;

exports[`MultipleChoiceAnswer should render mutually exclusive when it has one 1`] = `
<Field>
  <MultipleChoiceAnswer__Legend>
    Foo
  </MultipleChoiceAnswer__Legend>
  <Option
    key="1"
    option={
      Object {
        "id": "1",
      }
    }
    type="Checkbox"
  />
  <MultipleChoiceAnswer__MutuallyExclusiveOption>
    <MultipleChoiceAnswer__MutuallyExclusiveOptionTitle>
      Or
    </MultipleChoiceAnswer__MutuallyExclusiveOptionTitle>
    <Option
      option={
        Object {
          "id": "3",
        }
      }
      type="Checkbox"
    />
  </MultipleChoiceAnswer__MutuallyExclusiveOption>
</Field>
`;

exports[`MultipleChoiceAnswer should render other when it has one 1`] = `
<Field>
  <MultipleChoiceAnswer__Legend>
    Foo
  </MultipleChoiceAnswer__Legend>
  <Option
    key="1"
    option={
      Object {
        "id": "1",
      }
    }
    type="Radio"
  />
  <Option
    answer={
      Object {
        "id": 2,
        "type": "TextField",
      }
    }
    key="2"
    option={
      Object {
        "additionalAnswer": Object {
          "id": 2,
          "type": "TextField",
        },
        "id": "2",
      }
    }
    type="Radio"
  />
</Field>
`;

exports[`MultipleChoiceAnswer should render radio 1`] = `
<Field>
  <MultipleChoiceAnswer__Legend>
    Foo
  </MultipleChoiceAnswer__Legend>
  <Option
    key="1"
    option={
      Object {
        "id": "1",
      }
    }
    type="Radio"
  />
</Field>
`;
