// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContentPickerModal should render 1`] = `
<ContentPickerModal__StyledModal
  hasCloseButton={false}
>
  <ContentPickerModal__Flex>
    <BaseTabs
      ContentWrapper={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "ContentPickerModal__ContentWrapper-xm90e9-6",
            "isStatic": false,
            "rules": Array [
              "margin:0 1em;display:flex;flex:1 1 auto;flex-direction:column;justify-content:center;min-height:0;",
            ],
          },
          "displayName": "ContentPickerModal__ContentWrapper",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "ContentPickerModal__ContentWrapper-xm90e9-6",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      TabList={[Function]}
      activeId="answers"
      buttonRender={[Function]}
      onChange={[Function]}
      tabs={
        Array [
          Object {
            "id": "answers",
            "render": [Function],
            "showTabButton": true,
            "title": "Answer",
          },
          Object {
            "id": "metadata",
            "render": [Function],
            "showTabButton": true,
            "title": "Metadata",
          },
        ]
      }
    />
  </ContentPickerModal__Flex>
</ContentPickerModal__StyledModal>
`;

exports[`ContentPickerModal should render TabButton when showTabButton is true 1`] = `
<ContentPickerModal__TabButton>
  hello world
</ContentPickerModal__TabButton>
`;

exports[`ContentPickerModal should show an error message when answerData property is not provided 1`] = `
<ContentPickerModal__ErrorText
  data-test="no-previous-answers"
>
  There are no previous answers to pick from
</ContentPickerModal__ErrorText>
`;

exports[`ContentPickerModal should show an error message when metadataData property is not provided 1`] = `
<ContentPickerModal__ErrorText>
  There is no configured metadata to pick from
</ContentPickerModal__ErrorText>
`;

exports[`ContentPickerModal should show an error message when there are no answers to pick from 1`] = `
<ContentPickerModal__ErrorText
  data-test="no-previous-answers"
>
  There are no previous answers to pick from
</ContentPickerModal__ErrorText>
`;

exports[`ContentPickerModal should show an error message when there is no metadata 1`] = `
<ContentPickerModal__ErrorText>
  There is no configured metadata to pick from
</ContentPickerModal__ErrorText>
`;

exports[`ContentPickerModal should show answer and metadata tabs 1`] = `
<ContentPickerModal__StyledModal
  hasCloseButton={false}
>
  <ContentPickerModal__Flex>
    <BaseTabs
      ContentWrapper={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "ContentPickerModal__ContentWrapper-xm90e9-6",
            "isStatic": false,
            "rules": Array [
              "margin:0 1em;display:flex;flex:1 1 auto;flex-direction:column;justify-content:center;min-height:0;",
            ],
          },
          "displayName": "ContentPickerModal__ContentWrapper",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "ContentPickerModal__ContentWrapper-xm90e9-6",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      TabList={[Function]}
      activeId="answers"
      buttonRender={[Function]}
      onChange={[Function]}
      tabs={
        Array [
          Object {
            "id": "answers",
            "render": [Function],
            "showTabButton": true,
            "title": "Answer",
          },
          Object {
            "id": "metadata",
            "render": [Function],
            "showTabButton": true,
            "title": "Metadata",
          },
        ]
      }
    />
  </ContentPickerModal__Flex>
</ContentPickerModal__StyledModal>
`;

exports[`ContentPickerModal should show answer tab only 1`] = `
<ContentPickerModal__StyledModal
  hasCloseButton={false}
>
  <ContentPickerModal__Flex>
    <BaseTabs
      ContentWrapper={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "ContentPickerModal__ContentWrapper-xm90e9-6",
            "isStatic": false,
            "rules": Array [
              "margin:0 1em;display:flex;flex:1 1 auto;flex-direction:column;justify-content:center;min-height:0;",
            ],
          },
          "displayName": "ContentPickerModal__ContentWrapper",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "ContentPickerModal__ContentWrapper-xm90e9-6",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      TabList={[Function]}
      activeId="answers"
      buttonRender={[Function]}
      onChange={[Function]}
      tabs={
        Array [
          Object {
            "id": "answers",
            "render": [Function],
            "showTabButton": true,
            "title": "Answer",
          },
        ]
      }
    />
  </ContentPickerModal__Flex>
</ContentPickerModal__StyledModal>
`;

exports[`ContentPickerModal should show metadata tab only 1`] = `
<ContentPickerModal__StyledModal
  hasCloseButton={false}
>
  <ContentPickerModal__Flex>
    <BaseTabs
      ContentWrapper={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "ContentPickerModal__ContentWrapper-xm90e9-6",
            "isStatic": false,
            "rules": Array [
              "margin:0 1em;display:flex;flex:1 1 auto;flex-direction:column;justify-content:center;min-height:0;",
            ],
          },
          "displayName": "ContentPickerModal__ContentWrapper",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "ContentPickerModal__ContentWrapper-xm90e9-6",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      TabList={[Function]}
      activeId="answers"
      buttonRender={[Function]}
      onChange={[Function]}
      tabs={
        Array [
          Object {
            "id": "metadata",
            "render": [Function],
            "showTabButton": true,
            "title": "Metadata",
          },
        ]
      }
    />
  </ContentPickerModal__Flex>
</ContentPickerModal__StyledModal>
`;
