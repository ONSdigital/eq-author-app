/* eslint-disable import/unambiguous */
"use strict";

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

// Ensure environment variables are read.
// TODO: not 100% sure what this is doing.
// require("../config/env");

// const fs = require("fs");
import fs from "fs";
// const chalk = require("chalk");
import chalk from "chalk";
// const webpack = require("webpack");
import webpack from "webpack";
// const WebpackDevServer = require("webpack-dev-server");
import WebpackDevServer from "webpack-dev-server";
// const clearConsole = require("react-dev-utils/clearConsole");
import clearConsole from "react-dev-utils/clearConsole.js";
// const checkRequiredFiles = require("react-dev-utils/checkRequiredFiles");
import checkRequiredFiles from "react-dev-utils/checkRequiredFiles.js";
// const {
//   choosePort,
//   createCompiler,
//   prepareProxy,
//   prepareUrls,
// } = {require("react-dev-utils/WebpackDevServerUtils");
import {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} from "react-dev-utils/WebpackDevServerUtils.js";
// const openBrowser = require("react-dev-utils/openBrowser");
import openBrowser from "react-dev-utils/openBrowser.js";
// const paths = require("../config/paths");

import * as appPath from "../config/paths.js";
import * as appPublic from "../config/paths.js";

import * as appHtml from "../config/paths.js";
import * as appIndexJs from "../config/paths.js";
import * as appPackageJson from "../config/paths.js";
import * as yarnLockFile from "../config/paths.js";

// const config = require("../config/webpack.config.dev");
import * as config from "../config/webpack.config.dev.js";
const createDevServerConfig = require("../config/webpackDevServer.config");
const { logger } = require("../src/utils/logger");

const useYarn = fs.existsSync(yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([appHtml, appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || "0.0.0.0";

if (process.env.HOST) {
  logger.info(
    `Attempting to bind to HOST environment variable: ${process.env.HOST}`
  );
  logger.info(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  logger.info(
    `Learn more here: ${chalk.yellow("http://bit.ly/CRA-advanced-config")}`
  );
}

// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require("react-dev-utils/browsersHelper");
checkBrowsers(appPath, isInteractive)
  .then(() => {
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `choosePort()` Promise resolves to the next free port.
    return choosePort(HOST, DEFAULT_PORT);
  })
  .then((port) => {
    if (port == null) {
      // We have not found a port.
      return;
    }
    const protocol = process.env.HTTPS === "true" ? "https" : "http";
    const appName = require(appPackageJson).name;
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler({
      webpack,
      config,
      appName,
      urls,
      useYarn,
    });
    // Load proxy config
    const proxySetting = require(appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, appPublic);
    // Serve webpack assets generated by the compiler over a web server.
    const apiProxy = proxyConfig.find((proxy) => proxy.target === proxySetting);

    const whiteListedPaths = ["/status", "/launch", "/graphql", "/signIn"];

    apiProxy.context = (pathName) => {
      let shouldProxy = false;
      for (let i = 0; i < whiteListedlength; i++) {
        if (pathName.startsWith(whiteListedPaths[i])) {
          shouldProxy = true;
          break;
        }
      }
      return shouldProxy;
    };
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, (err) => {
      if (err) {
        return logger.error(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      logger.info("Starting the development server...\n");
      openBrowser(urls.localUrlForBrowser);
    });

    ["SIGINT", "SIGTERM"].forEach(function (sig) {
      process.on(sig, function () {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch((err) => {
    if (err && err.message) {
      logger.fatal(err.message);
    }
    process.exit(1);
  });
